1. Insertion Sort and Print 6th Iteration Result
c
#include <stdio.h>

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;

        // Print the array after the 6th iteration
        if (i == 6) {
            printf("After 6th iteration: ");
            for (int k = 0; k < n; k++) {
                printf("%d", arr[k]);
                if (k < n - 1) {
                    printf(",");
                }
            }
            printf("\n");
        }
    }
}

int main() {
    int arr[] = {98, 23, 45, 14, 6, 67, 33, 42};
    int n = sizeof(arr) / sizeof(arr[0]);

    insertionSort(arr, n);

    return 0;
}

2. Minimum Number of Edges in an Undirected Graph
c
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

#define MAX 100

typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

typedef struct Graph {
    int numVertices;
    Node** adjLists;
} Graph;

Node* createNode(int vertex) {
    Node* newNode = malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

Graph* createGraph(int vertices) {
    Graph* graph = malloc(sizeof(Graph));
    graph->numVertices = vertices;
    graph->adjLists = malloc(vertices * sizeof(Node*));
    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
    }
    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

int minEdgeBFS(Graph* graph, int start, int end) {
    bool visited[MAX] = {false};
    int distance[MAX];
    for (int i = 0; i < graph->numVertices; i++) {
        distance[i] = INT_MAX;
    }
    
    distance[start] = 0;
    visited[start] = true;

    int queue[MAX], front = 0, rear = 0;
    queue[rear++] = start;

    while (front < rear) {
        int current = queue[front++];
        Node* temp = graph->adjLists[current];

        while (temp) {
            int adjVertex = temp->vertex;
            if (!visited[adjVertex]) {
                visited[adjVertex] = true;
                distance[adjVertex] = distance[current] + 1;
                queue[rear++] = adjVertex;

                if (adjVertex == end) {
                    return distance[adjVertex];
                }
            }
            temp = temp->next;
        }
    }
    return -1; // No path exists
}

int main() {
    Graph* graph = createGraph(5);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    int u = 0, v = 4;
    int minEdges = minEdgeBFS(graph, u, v);
    if (minEdges != -1) {
        printf("Minimum number of edges between %d and %d is: %d\n", u, v, minEdges);
    } else {
        printf("No path exists between %d and %d\n", u, v);
    }

    return 0;
}

3. Count Nodes in a Linked List
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

int countNodes(Node* head) {
    int count = 0;
    Node* current = head;
    while (current != NULL) {
        count++;
        current = current->next;
    }
    return count;
}

int main() {
    Node* head = malloc(sizeof(Node));
    head->data = 1;
    head->next = malloc(sizeof(Node));
    head->next->data = 2;
    head->next->next = malloc(sizeof(Node));
    head->next->next->data = 3;
    head->next->next->next = malloc(sizeof(Node));
    head->next->next->next->data = 5;
    head->next->next->next->next = malloc(sizeof(Node));
    head->next->next->next->next->data = 8;
    head->next->next->next->next->next = NULL;

    printf("Number of nodes: %d\n", countNodes(head));

    return 0;
}

4. Fibonacci Series and Sum Using Recursion
c
#include <stdio.h>

int fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    int n = 10, sum = 0;
    printf("Fibonacci Series: ");
    for (int i = 0; i < n; i++) {
        int fib = fibonacci(i);
        printf("%d ", fib);
        sum += fib;
    }
    printf("\nSum: %d\n", sum);
    return 0;
}

5. Binary Search in an Array
c
#include <stdio.h>

int binarySearch(int arr[], int left, int right, int target) {
    if (right >= left) {
        int mid = left + (right - left) / 2;
        if (arr[mid] == target)
            return mid;
        if (arr[mid] > target)
            return binarySearch(arr, left, mid - 1, target);
        return binarySearch(arr, mid + 1, right, target);
    }
    return -1;
}

int main() {
    int arr[] = {1, 5, 6, 7, 9, 10};
    int target = 6;
    int index = binarySearch(arr, 0, sizeof(arr) / sizeof(arr[0]) - 1, target);
    if (index != -1)
        printf("Element found at location %d\n", index);
    else
        printf("Element not found\n");
    return 0;
}

6. Inorder and Postorder Traversal of a Binary Tree
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

void inorder(Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

void postorder(Node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d ", root->data);
    }
}

Node* newNode(int data) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

int main() {
    Node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);

    printf("Inorder Traversal: ");
    inorder(root);
    printf("\nPostorder Traversal: ");
    postorder(root);
    printf("\n");

    return 0;
}

7. Sort a String and Find Repeated Character Index
c
#include <stdio.h>
#include <string.h>

void sortString(char* str) {
    int n = strlen(str);
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (str[j] > str[j + 1]) {
                char temp = str[j];
                str[j] = str[j + 1];
                str[j + 1] = temp;
            }
        }
    }
}

int main() {
    char S[] = "tree";
    sortString(S);
    printf("Sorted string: %s\n", S);
    
    for (int i = 1; i < strlen(S); i++) {
        if (S[i] == S[i - 1]) {
            printf("Starting index of repeated character: %d\n", i - 1);
            break;
        }
    }
    return 0;
}

8. Check if a Linked List is a Palindrome
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* reverse(Node* head) {
    Node* prev = NULL;
    Node* current = head;
    Node* next = NULL;
    while (current != NULL) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

int isPalindrome(Node* head) {
    if (head == NULL || head->next == NULL)
        return 1;

    Node* slow = head;
    Node* fast = head;
    Node* prev_of_slow = NULL;

    while (fast != NULL && fast->next != NULL) {
        fast = fast->next->next;
        prev_of_slow = slow;
        slow = slow->next;
    }

    Node* second_half = slow;
    prev_of_slow->next = NULL; // Split the list into two halves

    second_half = reverse(second_half); // Reverse the second half

    Node* first_half = head;
    int result = 1;

    while (second_half != NULL) {
        if (first_half->data != second_half->data) {
            result = 0;
            break;
        }
        first_half = first_half->next;
        second_half = second_half->next;
    }
    return result;
}

int main() {
    Node* head = malloc(sizeof(Node));
    head->data = 1;
    head->next = malloc(sizeof(Node));
    head->next->data = 2;
    head->next->next = malloc(sizeof(Node));
    head->next->next->data = 2;
    head->next->next->next = malloc(sizeof(Node));
    head->next->next->next->data = 1;
    head->next->next->next->next = NULL;

    if (isPalindrome(head)) {
        printf("The linked list is a palindrome.\n");
    } else {
        printf("The linked list is not a palindrome.\n");
    }

    return 0;
}

9. Find Kth Smallest Element in a BST
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

int count = 0;

void kthSmallestUtil(Node* root, int k, int* result) {
    if (root == NULL || count >= k)
        return;

    kthSmallestUtil(root->left, k, result);
    count++;
    if (count == k)
        *result = root->data;
    kthSmallestUtil(root->right, k, result);
}

int kthSmallest(Node* root, int k) {
    int result = -1;
    kthSmallestUtil(root, k, &result);
    return result;
}

Node* newNode(int data) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

int main() {
    Node* root = newNode(5);
    root->left = newNode(3);
    root->right = newNode(8);
    root->left->left = newNode(2);
    root->left->right = newNode(4);
    root->right->right = newNode(9);

    int k = 3;
    printf("The %dth smallest element is %d\n", k, kthSmallest(root, k));

    return 0;
}

10. Frequency of Characters in a String
c
#include <stdio.h>
#include <string.h>

void characterFrequency(char* str) {
    int freq[256] = {0}; // Assuming ASCII
    for (int i = 0; str[i] != '\0'; i++) {
        freq[(int)str[i]]++;
    }

    printf("Character Frequency:\n");
    for (int i = 0; i < 256; i++) {
        if (freq[i] > 0) {
            printf("%c->%d ", i, freq[i]);
        }
    }
    printf("\n");
}

int main() {
    char S[] = "tree";
    characterFrequency(S);
    return 0;
}

11. Smallest Positive Missing Number
c
#include <stdio.h>
#include <stdbool.h>

int findMissing(int arr[], int n) {
    bool present[n + 1];
    for (int i = 0; i <= n; i++) {
        present[i] = false;
    }

    for (int i = 0; i < n; i++) {
        if (arr[i] > 0 && arr[i] <= n) {
            present[arr[i]] = true;
        }
    }

    for (int i = 1; i <= n; i++) {
        if (!present[i]) {
            return i;
        }
    }
    return n + 1;
}

int main() {
    int arr[] = {2, 3, 7, 6, 8, -1, -10, 15};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Smallest positive number missing: %d\n", findMissing(arr, n));
    return 0;
}
12. Construct a Binary Tree from Preorder and Inorder Traversals
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

int search(int arr[], int start, int end, int value) {
    for (int i = start; i <= end; i++) {
        if (arr[i] == value) {
            return i;
        }
    }
    return -1;
}

Node* buildTree(int preorder[], int inorder[], int start, int end, int* preIndex) {
    if (start > end) {
        return NULL;
    }

    Node* node = (Node*)malloc(sizeof(Node));
    node->data = preorder[*preIndex];
    (*preIndex)++;

    if (start == end) {
        node->left = node->right = NULL;
        return node;
    }

    int inIndex = search(inorder, start, end, node->data);
    node->left = buildTree(preorder, inorder, start, inIndex - 1, preIndex);
    node->right = buildTree(preorder, inorder, inIndex + 1, end, preIndex);
    
    return node;
}

Node* buildTreeWrapper(int preorder[], int inorder[], int n) {
    int preIndex = 0;
    return buildTree(preorder, inorder, 0, n - 1, &preIndex);
}

void printTree(Node* root) {
    if (root == NULL) {
        return;
    }
    printf("%d ", root->data);
    printTree(root->left);
    printTree(root->right);
}

int main() {
    int preorder[] = {3, 9, 20, 15, 7};
    int inorder[] = {9, 3, 15, 20, 7};
    int n = sizeof(preorder) / sizeof(preorder[0]);

    Node* root = buildTreeWrapper(preorder, inorder, n);
    printf("Constructed Binary Tree (Preorder): ");
    printTree(root);
    printf("\n");

    return 0;
}

13. Create and Display a Linked List
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void displayList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d->", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    Node* head = createNode(6);
    head->next = createNode(7);
    head->next->next = createNode(8);
    head->next->next->next = createNode(9);
    displayList(head);
    return 0;
}

14. Bubble Sort in Descending Order
c
#include <stdio.h>

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {4, 7, 9, 12};
    int n = sizeof(arr) / sizeof(arr[0]);
    bubbleSort(arr, n);
    printf("Sorted array in descending order: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return 0;
}

15. Find Missing Element in Array
c
#include <stdio.h>

int findMissing(int arr[], int n) {
    int total = (n + 1) * (n + 2) / 2; // Sum of first N natural numbers
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return total - sum;
}

int main() {
    int arr[] = {1, 2, 3, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Missing element: %d\n", findMissing(arr, n));
    return 0;
}

16. Find Odd Numbers in a Linked List
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

void printOddNumbers(Node* head) {
    Node* current = head;
    printf("Odd numbers in the linked list: ");
    while (current != NULL) {
        if (current->data % 2 != 0) {
            printf("%d ", current->data);
        }
        current = current->next;
    }
    printf("\n");
}

int main() {
    Node* head = malloc(sizeof(Node));
    head->data = 1;
    head->next = malloc(sizeof(Node));
    head->next->data = 2;
    head->next->next = malloc(sizeof(Node));
    head->next->next->data = 3;
    head->next->next->next = malloc(sizeof(Node));
    head->next->next->next->data = 7;
    head->next->next->next->next = NULL;

    printOddNumbers(head);
    return 0;
}

17. Queue Operations (Insert and Delete)
c
#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct Queue {
    int items[MAX];
    int front, rear;
} Queue;

void initializeQueue(Queue* q) {
    q->front = -1;
    q->rear = -1;
}

int isFull(Queue* q) {
    return q->rear == MAX - 1;
}

int isEmpty(Queue* q) {
    return q->front == -1;
}

void enqueue(Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full!\n");
        return;
    }
    if (isEmpty(q)) {
        q->front = 0;
    }
    q->items[++q->rear] = value;
}

int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return -1;
    }
    int item = q->items[q->front];
    if (q->front >= q->rear) {
        q->front = q->rear = -1; // Reset the queue
    } else {
        q->front++;
    }
    return item;
}

void displayQueue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Queue: ");
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->items[i]);
    }
    printf("\n");
}

int main() {
    Queue q;
    initializeQueue(&q);

    enqueue(&q, 12);
    enqueue(&q, 34);
    enqueue(&q, 56);
    enqueue(&q, 78);
    displayQueue(&q);

    enqueue(&q, 60);
    printf("After insertion of 60: ");
    displayQueue(&q);

    int removed = dequeue(&q);
    printf("After deleting %d: ", removed);
    displayQueue(&q);

    return 0;
}

18. Validate Parentheses in a String
c
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 100

typedef struct Stack {
    char items[MAX];
    int top;
} Stack;

void initializeStack(Stack* s) {
    s->top = -1;
}

bool isFull(Stack* s) {
    return s->top == MAX - 1;
}

bool isEmpty(Stack* s) {
    return s->top == -1;
}

void push(Stack* s, char item) {
    if (!isFull(s)) {
        s->items[++s->top] = item;
    }
}

char pop(Stack* s) {
    if (!isEmpty(s)) {
        return s->items[s->top--];
    }
    return '\0'; // Return null character if stack is empty
}

bool isValid(char* s) {
    Stack stack;
    initializeStack(&stack);
    for (int i = 0; s[i] != '\0'; i++) {
        if (s[i] == '(' || s[i] == '{' || s[i] == '[') {
            push(&stack, s[i]);
        } else {
            if (isEmpty(&stack)) {
                return false;
            }
            char top = pop(&stack);
            if ((s[i] == ')' && top != '(') ||
                (s[i] == '}' && top != '{') ||
                (s[i] == ']' && top != '[')) {
                return false;
            }
        }
    }
    return isEmpty(&stack);
}

int main() {
    char s[] = "()";
    if (isValid(s)) {
        printf("The string is valid.\n");
    } else {
        printf("The string is not valid.\n");
    }
    return 0;
}

19. Fibonacci Series Using Iteration
c
#include <stdio.h>

int main() {
    int n = 10;
    int a = 0, b = 1, c, sum = 0;

    printf("Fibonacci Series: ");
    for (int i = 0; i < n; i++) {
        if (i == 0) {
            printf("%d", a);
            sum += a;
            continue;
        }
        if (i == 1) {
            printf(", %d", b);
            sum += b;
            continue;
        }
        c = a + b;
        printf(", %d", c);
        sum += c;
        a = b;
        b = c;
    }
    printf("\nSum: %d\n", sum);
    return 0;
}

20. Find the Index of the First Occurrence of a Substring
c
#include <stdio.h>
#include <string.h>

int strStr(char* haystack, char* needle) {
    int m = strlen(haystack);
    int n = strlen(needle);
    if (n == 0) return 0;

    for (int i = 0; i <= m - n; i++) {
        if (strncmp(haystack + i, needle, n) == 0) {
            return i;
        }
    }
    return -1;
}

int main() {
    char haystack[] = "sadbut sad";
    char needle[] = "sad";
    int index = strStr(haystack, needle);
    if (index != -1) {
        printf("Needle found at index: %d\n", index);
    } else {
        printf("Needle not found.\n");
    }
    return 0;
}
21. Implement Queue Using Two Stacks
c
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct Stack {
    int* items;
    int top;
    int capacity;
} Stack;

typedef struct Queue {
    Stack* s1;
    Stack* s2;
} Queue;

Stack* createStack(int capacity) {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->items = (int*)malloc(capacity * sizeof(int));
    stack->top = -1;
    stack->capacity = capacity;
    return stack;
}

bool isStackEmpty(Stack* stack) {
    return stack->top == -1;
}

bool isStackFull(Stack* stack) {
    return stack->top == stack->capacity - 1;
}

void push(Stack* stack, int item) {
    if (isStackFull(stack)) {
        printf("Stack Overflow\n");
        return;
    }
    stack->items[++stack->top] = item;
}

int pop(Stack* stack) {
    if (isStackEmpty(stack)) {
        printf("Stack Underflow\n");
        return -1;
    }
    return stack->items[stack->top--];
}

int peek(Stack* stack) {
    if (isStackEmpty(stack)) {
        printf("Stack Underflow\n");
        return -1;
    }
    return stack->items[stack->top];
}

Queue* createQueue(int capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->s1 = createStack(capacity);
    queue->s2 = createStack(capacity);
    return queue;
}

void enqueue(Queue* queue, int item) {
    push(queue->s1, item);
}

int dequeue(Queue* queue) {
    if (isStackEmpty(queue->s1) && isStackEmpty(queue->s2)) {
        printf("Queue Underflow\n");
        return -1;
    }
    if (isStackEmpty(queue->s2)) {
        while (!isStackEmpty(queue->s1)) {
            push(queue->s2, pop(queue->s1));
        }
    }
    return pop(queue->s2);
}

int peek(Queue* queue) {
    if (isStackEmpty(queue->s1) && isStackEmpty(queue->s2)) {
        printf("Queue Underflow\n");
        return -1;
    }
    if (isStackEmpty(queue->s2)) {
        while (!isStackEmpty(queue->s1)) {
            push(queue->s2, pop(queue->s1));
        }
    }
    return peek(queue->s2);
}

bool isEmpty(Queue* queue) {
    return isStackEmpty(queue->s1) && isStackEmpty(queue->s2);
}

int main() {
    Queue* queue = createQueue(100);
    enqueue(queue, 1);
    enqueue(queue, 2);
    printf("Peek: %d\n", peek(queue));
    printf("Dequeued: %d\n", dequeue(queue));
    printf("Is queue empty? %s\n", isEmpty(queue) ? "true" : "false");
    return 0;
}

22. Bubble Sort in Descending Order
c
#include <stdio.h>

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {9, 10, -9, 23, 67, -90};
    int n = sizeof(arr) / sizeof(arr[0]);
    bubbleSort(arr, n);
    printf("Sorted array in descending order: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return 0;
}

23. Factorial Using Iteration
c
#include <stdio.h>

int factorial(int n) {
    int fact = 1;
    for (int i = 1; i <= n; i++) {
        fact *= i;
    }
    return fact;
}

int main() {
    int n = 2;
    printf("Factorial of %d is %d\n", n, factorial(n));
    return 0;
}

24. Bubble Sort in Ascending Order
c
#include <stdio.h>

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int arr[] = {9, 10, -9, 23, 67, -90};
    int n = sizeof(arr) / sizeof(arr[0]);
    bubbleSort(arr, n);
    printf("Sorted array in ascending order: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    return 0;
}

25. Minimum Stack
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    int min;
    struct Node* next;
} Node;

Node* createNode(int data, int min) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->min = min;
    newNode->next = NULL;
    return newNode;
}

void push(Node** head, int data) {
    int min = data;
    if (*head != NULL && (*head)->min < min) {
        min = (*head)->min;
    }
    Node* newNode = createNode(data, min);
    newNode->next = *head;
    *head = newNode;
}

void pop(Node** head) {
    if (*head == NULL) {
        printf("Stack Underflow\n");
        return;
    }
    Node* temp = *head;
    *head = (*head)->next;
    free(temp);
}

int top(Node* head) {
    if (head == NULL) {
        printf("Stack Underflow\n");
        return -1;
    }
    return head->data;
}

int getMin(Node* head) {
    if (head == NULL) {
        printf("Stack Underflow\n");
        return -1;
    }
    return head->min;
}

int main() {
    Node* head = NULL;
    push(&head, -2);
    push(&head, 0);
    push(&head, -3);
    printf("Minimum element: %d\n", getMin(head));
    pop(&head);
    printf("Top element: %d\n", top(head));
    printf("Minimum element: %d\n", getMin(head));
    return 0;
}

26. Factorial Using Iteration
c
#include <stdio.h>

int factorial(int n) {
    int fact = 1;
    for (int i = 1; i <= n; i++) {
        fact *= i;
    }
    return fact;
}

int main() {
    int n = 3;
    printf("Factorial of %d is %d\n", n, factorial(n));
    return 0;
}

27. Insert Node at Nth Position in Linked List
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Node* insertAtNth(Node* head, int data, int n) {
    Node* newNode = createNode(data);
    if (n == 0) {
        newNode->next = head;
        return newNode;
    }
    Node* current = head;
    for (int i = 0; i < n - 1 && current != NULL; i++) {
        current = current->next;
    }
    if (current == NULL) {
        return head;
    }
    newNode->next = current->next;
    current->next = newNode;
    return head;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d->", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    Node* head = createNode(1);
    head->next = createNode(3);
    head->next->next = createNode(2);
    head->next->next->next = createNode(3);
    head->next->next->next->next = createNode(4);
    head->next->next->next->next->next = createNode(5);

    printf("Original list: ");
    printList(head);

    head = insertAtNth(head, 0, 0);
    printf("After inserting 0 at position 0: ");
    printList(head);

    return 0;
}

28. Reverse Linked List Between Left and Right Positions
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Node* reverseBetween(Node* head, int left, int right) {
    if (head == NULL || head->next == NULL || left == right) {
        return head;
    }
    Node* dummy = createNode(0);
    dummy->next = head;
    Node* prev = dummy;
    Node* curr = head;
    for (int i = 0; i < left - 1; i++) {
        prev = curr;
        curr = curr->next;
    }
    Node* last = prev;
    Node* end = curr;
    for (int i = 0; i < right - left + 1; i++) {
        Node* next = curr->next;
        curr->next = prev->next;
        prev->next = curr;
        curr = next;
    }
    last->next = end;
    return dummy->next;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d->", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    Node* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(3);
    head->next->next->next = createNode(4);
    head->next->next->next->next = createNode(5);

    printf("Original list: ");
    printList(head);

    head = reverseBetween(head, 2, 4);
    printf("After reversing between positions 2 and 4: ");
    printList(head);

    return 0;
}

29. Reverse Linked List
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Node* reverseList(Node* head) {
    Node* prev = NULL;
    Node* curr = head;
    while (curr != NULL) {
        Node* next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d->", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    Node* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(3);
    head->next->next->next = createNode(4);
    head->next->next->next->next = createNode(5);

    printf("Original list: ");
    printList(head);

    head = reverseList(head);
    printf("Reversed list: ");
    printList(head);

    return 0;
}

30. Add Two Numbers Represented as Linked Lists
c
#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Node* addTwoNumbers(Node* l1, Node* l2) {
    Node* dummy = createNode(0);
    Node* curr = dummy;
    int carry = 0;
    while (l1 != NULL || l2 != NULL) {
        int sum = carry;
        if (l1 != NULL) {
            sum += l1->data;
            l1 = l1->next;
        }
        if (l2 != NULL) {
            sum += l2->data;
            l2 = l2->next;
        }
        curr->next = createNode(sum % 10);
        curr = curr->next;
        carry = sum / 10;
    }
    if (carry > 0) {
        curr->next = createNode(carry);
    }
    return dummy->next;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d->", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    Node* l1 = createNode(1);
    l1->next = createNode(3);
    Node* l2 = createNode(2);
    Node* result = addTwoNumbers(l1, l2);
    printf("Result: ");
    printList(result);
    return 0;
}